#!/usr/bin/env python
# -*- coding: utf-8 -*-

import tp_calc
import Alignment
import TracePoint
import Cigar_Pattern
import math
import matplotlib
matplotlib.rcParams['text.usetex'] = True
matplotlib.rcParams['text.latex.unicode'] = True
import matplotlib.pyplot as plt
import collections
import argparse
import time
import sys
reload(sys)
sys.setdefaultencoding('utf8')

from heapq import heappush, heappop, heapify
from collections import defaultdict

def bucket(bit_sum, base):

  bucket = []
  for element in bit_sum:
    for i in range(10,1,-1):
      if element < (base/i):
        r = int(base * round(float(element)/(base/i)))
        if r == 0:
          bucket.append(element)
        else:
          bucket.append(r)
      else:
        r = int(base * round(float(element)/base))
        if r == 0:
          bucket.append(element)
        else:
          bucket.append(r)

  return bucket

def encode(symb2freq):
    """Huffman encode the given dict mapping symbols to weights"""
    heap = [[wt, [sym, ""]] for sym, wt in symb2freq.items()]
    heapify(heap)
    while len(heap) > 1:
        lo = heappop(heap)
        hi = heappop(heap)
        for pair in lo[1:]:
            pair[1] = '0' + pair[1]
        for pair in hi[1:]:
            pair[1] = '1' + pair[1]
        heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
    return sorted(heappop(heap)[1:], key=lambda p: (len(p[-1]), p))
 
def huffman(code):
  symb2freq = defaultdict(int)
  for ch in code:
    symb2freq[ch] += 1
  huff = encode(symb2freq)
  bits = 0
  canon = []
  # print "Symbol\tWeight\tHuffman Code"
  for p in huff:
    bits += len(p[1])
    it = (p[0],p[1],len(p[1]))
    canon.append(it)
    # print "%s\t%s\t%s" % (p[0], symb2freq[p[0]], p[1])
  bits += canonical(canon)
  return bits 

def canonical(huf):
  #for a in huf:print a
  minsize=huf[0][2]
  co = '0'
  if len(co)<minsize:co='0'*(minsize-len(co))+co
  ne = [(huf[0][0],co,len(co))]
  code = 0
  for i in range(1,len(huf)):
    code = (code+1) << huf[i][2] - huf[i-1][2]
    co=bin(code)[2:]
    l = len(co)
    if l<minsize:co='0'*(minsize-l)+co
    ne.append((huf[i][0],co,len(co)))
  #for a in ne:
  #  print a
  ls1 = []
  ls2 = []
  ls3 = []
  for a in ne:
    ls1.append(a[2]) # len(bits)
    ls2.append(a[1]) # bits
    ls3.append(a[0]) # symbol

  c = collections.Counter(ls1)
  vals = c.values()

  for i in range(0,len(ls2)):
    if len(ls2[i]) != i+1:
      vals.insert(i,0)
  leng = len(ls2)-1
  for i in range(leng,0,-1):
    if vals[i] == 0:
      del vals[i]
    elif vals[i] != 0:
      break
  size_header = 0
  for element in ls1:
    size_header+=(element+1)
  size_header+=(len(ls3))
  
  return size_header

def unary(code):
  counter = collections.Counter(code)
  #print counter
  #print counter.keys()
  #print counter.values()
  #print counter.most_common()
  bits = 0
  #for i in range(0,len(counter.keys())): bits += (i + 1) * 
  i = 0
  for key, value in counter.most_common():
    #print key, value
    bits += (i + 1) * value
    i += 1
    #print "key, value, bits", key, value, bits
  """
  symb2freq = defaultdict(int)
  for ch in code:
    symb2freq[ch] += 1
  huff = encode(symb2freq)
  bits = 0
  i = 1
  order = []
  for p in huff:
    #order.append(symb2freq[p[0]])
    order.append(p[0])
  #order.sort(reverse=True) 
  print "ORDER:", order
  for i in range(0,len(order)):
    bits += (i+1)#*order[i]
    print "BITS:", bits
  print "END BITS:", bits
  """
  #print "bits", bits
  return bits 

def entropy(amount, random_length, error_rate, alphabet, delta, manual):

  start_seq1 = start_seq2 = 0
  random_seq_list = tp_calc.random_sequences(amount,random_length,error_rate,
                    alphabet)

  diff_ent_sum = []
  cig_ent_sum = []
  for i in range(0, len(random_seq_list), 2):
    print (i/2)+1,"von",len(random_seq_list)/2
    end_seq1 = len(random_seq_list[i])
    end_seq2 = len(random_seq_list[i+1]) 
    aln = Alignment.Alignment(random_seq_list[i], random_seq_list[i + 1], 
                    start_seq1, end_seq1, start_seq2, end_seq2)

    cigar = aln.calc_cigar(aln.seq1, aln.seq2)
    tp_aln = TracePoint.TracePointAlignment(aln.seq1, aln.seq2, start_seq1, 
                                            end_seq1, start_seq2, end_seq2, 
                                            delta, cigar)
    mcount = dcount = icount = 0
    cig_count_sum = []
    cig_sym_sum = []
    for cig_count, cig_symbol in Cigar_Pattern.parse_cigar(cigar):
      cig_sym_sum.append(cig_symbol)
      cig_count_sum.append(cig_count)
    counter1 = collections.Counter(cig_count_sum)    
    counter2 = collections.Counter(cig_sym_sum)    

    ent1 = ent2 = 0
    for value in counter1.values():
      px = float(value)/sum(counter1.values())
      ent1 += px * math.log(px,2)

    for value in counter2.values():
      px = float(value)/sum(counter2.values())
      ent2 += px * math.log(px,2)
    cig_ent_sum.append(-ent1 * len(cig_count_sum) + (-ent2 * len(cig_sym_sum)))

    # store differences between Trace Points and Delta Value in List
    TP = [delta, tp_aln.tp[0]]
    for j in range(1,len(tp_aln.tp)):
      TP.append(tp_aln.tp[j]-tp_aln.tp[j-1])

    counter = collections.Counter(TP)
    #counter = collections.Counter(bucket(TP))
    ent = 0
    for value in counter.values():
      px = float(value)/sum(counter.values())
      ent += px * math.log(px,2)
    diff_ent_sum.append(-ent*len(TP))

  print "\nCig Ent Sum:\n", cig_ent_sum, "\n"
  print "\nDiff Ent Sum:\n", diff_ent_sum, "\n"
  return [cig_ent_sum, diff_ent_sum]

def plotent(cig_ent_sum, diff_ent_sum, buck1, buck2, manual):
  if manual:
    cig_ent_sum = [1927.1605212812788, 1963.865794005194, 1610.6801196230151, 1634.0837112570728, 1752.408077729581, 1832.8626210898942, 1690.8626433120821, 1580.3029555158819, 1893.721696434944, 1987.2161486115124, 1780.0419433655475, 1744.9700229965404, 1716.7722758652014, 1741.412949940643, 1713.668150581447, 2026.411613344378, 1627.9038895982067, 1791.1133522010432, 1397.3264576511883, 1565.1081379455, 1877.4926765119617, 1778.9139311287122, 1792.4710500750934, 1773.091621065378, 1847.2283501626498, 1735.6261458038769, 1840.159323926324, 1742.7385864545006, 1824.0651860866294, 1711.4603488991368, 1637.7039348710189, 2091.745701047895, 1859.697340015502, 1678.7994280788903, 1837.171181316397, 1615.2625302562365, 1734.0198144816798, 1976.5470679687924, 1843.0202739207837, 1712.1906164922837, 1927.7286100517683, 1617.7822192416384, 1559.3880099729033, 1605.1126126236336, 1947.7607838160745, 1807.8456134705661, 1487.1668404253421, 1813.141246250363, 1776.7633530997225, 1760.3705805872578, 1647.9837605748953, 1529.5193907497194, 1889.921515747893, 1666.3671384726604, 1803.0331953267994, 1714.6317129894476, 1850.5998616812708, 1886.696823580146, 1763.1332850001204, 1714.0640591005624, 1844.723088503405, 1747.2655402572354, 1656.643832407514, 1945.756842740076, 1760.4519394363683, 1851.0697160154577, 1589.456990087693, 1873.1334075641298, 1742.4314326008794, 1977.1461173726557, 1718.1884270532535, 1661.5983471255513, 1557.999637772667, 1918.530068193487, 1777.9680584172831, 1879.6506774796962, 1880.5363608366072, 1921.5790061970374, 1803.4880197693433, 1624.5351311016598, 1755.8709275465724, 1771.185405292405, 1951.1891410110686, 1646.7018070782187, 1854.5438205685527, 2000.279699443376, 1537.5898236812727, 1604.810417616577, 1550.8581927957941, 1559.0892346035807, 1694.0557489281096, 1583.706342136736, 1894.4515671211484, 1629.1013386287832, 1969.4869460363825, 1601.2069171959047, 1646.9389482574118, 1798.1837140496586, 1757.5243518980014, 1767.341725937195, 1601.4239877515217, 1713.3945067498412, 1640.7274405002079, 1523.7621501039305, 1880.7251260144626, 1726.6304728324073, 1782.7482639183563, 1993.5986432322857, 1877.385556872789, 1694.9902028529682, 1952.6597439473662, 1598.050068655717, 1923.6203401256141, 1587.9202878242113, 1784.418393597491, 1886.7305268490823, 1769.7685929410165, 1788.6523247228122, 1783.6373360691719, 1595.6628800660908, 1707.019402248427, 1546.2962535149625, 1808.0382507568559, 1746.7941482441333, 1613.0196616737032, 1642.6715417882629, 1758.772015801611, 1877.9996039672692, 1599.590305264452, 1896.6195315225343, 1557.3220115699141, 1869.5370163845923, 1837.8016952167336, 1851.4206216858995, 1809.7707276957017, 1964.8853455366368, 1470.3358572366462, 1692.448355097498, 1773.7578757096596, 1819.0340477999468, 1730.2578556873257, 1657.7770396914418, 1645.9987385223521, 1821.3401172392757, 1964.3478509451206, 1727.9820094195745, 1873.9934067977997, 1824.2361094793846, 1684.796947531244, 1748.2450783495851, 1705.8077810350878, 1631.885575347188, 1802.7803437815114, 1606.9011980205664, 1552.6458876939614, 1692.1657409206878, 1885.408103221211, 1758.6149854691014, 1610.6033803224846, 1631.1021246981456, 1706.8256881068564, 2073.9110263820894, 1585.832340272709, 1770.582454243975, 1571.0837820830134, 1634.8577427830446, 1901.0668385644576, 1672.2881471775927, 1956.383797753404, 1699.4863839543495, 1778.151946657685, 1837.959407808013, 1596.885499481689, 1962.155287854775, 1854.8986423913184, 1984.1896951939152, 1896.301924505504, 1943.0247875347245, 2002.6002167739744, 1742.0002493964648, 1781.3021430088857, 1674.10952915196, 1834.9157645833557, 1712.5122202747339, 1881.8756814496649, 1694.3971802275616, 1579.4255788161076, 1892.9900374568456, 1850.6284409225298, 1776.297351255941, 1612.5409543926944, 2020.6561810651733, 1768.146346344121, 1971.5744450147886, 1989.3118887283913, 1797.4962506670477, 1678.9039533490977, 1740.1661573116176, 1895.8647117176515, 1849.2066492111435, 1843.9386759098038, 1766.3483501019505, 1953.4853239411123, 2213.452552366447, 1804.336155300857, 1734.7555836838346, 2030.6592395928483, 1928.29827250884, 1792.1801860725393, 1640.1812046362124, 1921.0634598262188, 1726.4413029239981, 1812.6777445648, 1822.9402721014035, 1804.665748772654, 1999.437767923488, 1798.5986090527915, 1820.4486015002549, 1745.9583882897225, 1292.0344006262296, 1864.9631777898153, 1965.9461289894323, 1498.4705625780123, 1854.7312872530338, 1793.6843418107778, 1746.7694693374365, 1897.385309236152, 1817.501018264372, 1703.4285004352387, 1896.7014406672645, 1702.1419593238434, 1932.575249069442, 1685.2881542853104, 1790.8233923278633, 1947.2395334975217, 1613.8344660194014, 1792.618173158287, 1850.1852112097981, 1687.6481543877478, 1772.6496467368042, 1786.615201150252, 1568.3905479991176, 1919.8478064694568, 2087.554362462228, 1842.865933688026, 1685.8972715455584, 1578.6443917125407, 1656.1353370426596, 1824.9327625029662, 1948.3921832665762, 1806.4016588082272, 1913.669465435158, 1773.0179701686538, 1792.6448281901867, 1685.8229918845914, 1824.3905368224896, 1883.6253009914014, 1785.910436982213, 1854.2563129030652, 1658.4067604207105, 1527.814654602175, 1406.1250981200947, 1803.2817397746926, 1868.0531524962332, 1537.2932078021784, 1769.4291619991536, 1509.9886822549906, 1736.0475045201474, 1804.1216696127192, 1790.409437219407, 1847.910614506483, 1780.5607184282987, 1692.0993583556353, 2048.3715800873397, 1701.2065383497807, 1825.2563597231915, 1596.685811807563, 1616.8920473310577, 1699.8444491990756, 1653.12563135931, 1727.7227495175657, 1526.9539457932183, 1855.5878221215926, 1707.2832385171894, 1733.5648368331383, 1824.6995710929862, 1748.4878537045863, 1826.5821341709677, 1710.4082213286822, 1938.3909893043756, 1712.34531846781, 1798.2395006529712, 1729.2587642165022, 1879.8246055668224, 1887.112554291834, 1551.960212572237, 1490.3589970629687, 1596.2840895363388, 1919.4765730385636, 1996.7586640836016, 1751.8717166338533, 1593.6947963939606, 1597.2300261455691, 1788.5234734555088, 1770.41119984171, 1795.7769840592293, 1810.4042623763883, 1656.7474256253151, 1777.6421092525918, 1676.8033558551765, 1858.5688193741807, 1681.14937060275, 1798.0326227973324, 1818.039888253363, 1692.87810730697, 1744.6465699457087, 1689.081464260545, 1721.3943963861536, 1587.960233222393, 1908.9630565002233, 1810.2065033117597, 1719.0131864299244, 1789.8636417668013, 1824.735328685257, 1739.20855855053, 1747.790415803815, 1620.4196521408971, 1765.0797667881689, 1683.0210643968055, 1708.5672790743738, 1809.1289240721935, 1786.8704361293567, 1712.6975734569937, 1876.3372164094387, 1832.0013038049967, 1541.4902943421685, 1547.9629726387225, 1940.450928506304, 1890.9337023566377, 1821.617279523673, 1937.4303527978595, 1634.0597139833872, 1886.8501133622372, 1826.250865945021, 1932.6356855777253, 1486.115763307035, 1782.476675068349, 1751.2391443107704, 1615.105717294918, 1731.0610675804278, 1866.982954437349, 1688.1226527350536, 1785.0623885157174, 1640.660715635684, 1789.4890360266268, 1615.221996026777, 1739.0499895815267, 1836.0637604618212, 1554.6299406569835, 1467.332407841233, 1645.3438504204607, 1787.4547452508634, 1374.442229576709, 1840.7088617538684, 1674.6982171640366, 1594.1435812666443, 1554.5394457911925, 1695.163586668609, 1862.478235877801, 1535.3204641460536, 1703.1509640570773, 1883.4207531140369, 1551.2698471287415, 1555.8389507729785, 1860.55492697312, 1599.7104932522475, 1822.705135969215, 1638.7454132331225, 1819.3399046480768, 1830.5505132084563, 1717.692869706305, 1727.582559985096, 1760.9644404240344, 1863.3505969272026, 1914.124254212593, 1818.4016321976424, 1795.3718646381585, 1508.4944454356519, 1847.8201284613492, 1720.1984127676646, 1881.8004226698365, 1795.3934769907798, 1762.3106526500746, 1803.8006147737212, 1858.6644917156975, 1923.5866077892538, 1711.4201504603802, 1930.7150276822044, 1634.8209410278298, 2126.956469790965, 1679.7891347465497, 1871.6960287394459, 1638.7096681862151, 1853.93902602191, 1811.105439864794, 1803.8905214962715, 1734.6772408345569, 1611.1915380625844, 1627.2753829529024, 1978.406291433936, 1600.8022855574761, 1784.665708143841, 1485.053684791641, 1908.197005153397, 1771.1004985497862, 1642.026457097575, 1561.4620922516585, 1701.3169372979487, 1799.4129150101573, 1678.8826946932793, 1782.0806422871435, 1919.1981190336164, 1600.6063922396163, 1693.1009247357806, 1793.2603453132547, 1771.3658277889226, 2017.5775321350397, 2127.779504313964, 1708.9855555232489, 1801.8504021443603, 1777.8541952246485, 1630.8033802893035, 1714.7148655968422, 1784.4496168827638, 1992.2000376211931, 1616.0630750492683, 1810.7411982040926, 1821.806840113825, 1469.2833204231933, 1859.6000321969336, 1572.3128556702268, 1680.828770998936, 1655.6900416774336, 1637.5921890284408, 1870.1394671038106, 1582.6116445319853, 1564.3359624780073, 1644.3742136279616, 1707.7571994369232, 1881.6941128845763, 2085.0356430762336, 1725.9801697066655, 1629.963742765328, 1683.599962045539, 1804.6126588889188, 1763.8325046780435, 2030.7667785651608, 1331.694875653615, 1876.8759604020358, 1838.3018414678538, 1755.0728506152868, 1964.9715511273982, 1611.9198771911558, 1658.1103489480297, 1615.5724291806978, 1659.4723772561752, 1843.7198634287445, 1605.1805141740774, 1826.747594001916, 1477.073915160746, 1866.147367702632, 1949.804723500963, 1552.3091122649778, 1732.872886511629, 1892.0294508439065, 1836.2447535312392, 1789.3496320487548, 1784.6520336127599, 1975.0899132036343, 1805.8619794132917, 1729.1270491248995, 1598.9621680524356, 1818.504981999331, 1617.4036695458776, 1739.5472709227665, 1819.587621142416, 1771.4517967931556, 1737.1948229519808, 1844.6091810021321, 1743.0508472639858, 1822.328440094044, 1754.6496752883, 1636.6266903760802, 1808.1978326929066, 1833.2238642473312, 1662.0377805146072, 1833.123797334667, 1802.5543222639355, 1775.1731773370789, 1862.8462773499289, 1567.611928764657, 1795.596978885603, 2016.449587247234, 1988.1610361842386, 1722.1701554985568, 1598.4173405949755, 1777.2128906966477, 1602.468650162789, 1869.1907498101511, 1610.9215607426856, 1868.455907804501, 1699.0479743967849, 1474.1257062019283, 1689.9333880917127, 1968.9024733931215, 1744.9555168940067, 1832.326412705466, 1638.5989595803262, 1648.581883375402, 1808.5531221218707, 1676.7579331163736, 1562.7029391268475, 1801.2622249593821, 1795.848788239628, 1580.2285024129555, 1697.2723919971313, 1808.7660303055798, 1790.6400789755291, 1727.526677405833, 1622.126280218869, 2156.526177946572, 1949.3945709301522, 1974.5064496391765, 1801.727245014597, 1680.4889580103404, 1689.7261382970958, 1989.9521270246983, 1879.6901772320534, 1889.8942908042834, 1867.704701092086, 1573.098053979097, 1803.7356983794757, 1754.9050004171722, 1696.7319905018808, 1896.6780167808242, 1463.2488229794303, 1694.3010743706286, 1751.7786633507194, 1761.2258990575601, 1901.8156983367792, 1523.0324803268454, 1895.7384901864625, 1645.4523253062002, 1718.554212626405, 1669.9261011728554, 1600.690722779606, 1607.7331393830555, 1725.1103799762989, 1969.1091033687994, 1653.9407241417466, 1816.245861237143, 1586.3409668658246, 1737.305533631309, 1848.6855601105462, 1907.6038677993074, 1864.6796728095342, 1803.6889241670606, 1761.841151686029, 1738.5917692275716, 1767.1869916689743, 1846.2569889553756, 1764.853572724665, 1815.592664089948, 1725.996319534115, 1574.3486911506704, 1743.6392835188703, 1763.5019502354648, 1776.601008655674, 1614.8007133954084, 1741.82432010216, 1811.2041856762241, 1465.9466347496386, 1782.206645525086, 1854.8582577021325, 1772.9663387092987, 1772.4349576172463, 1968.4949774981758, 1713.5936786929242, 2068.0488882215795, 1839.6557282350223, 1781.2303865476115, 1937.0072662261873, 1901.3381198276682, 1925.0508738849512, 1854.9923929776592, 1519.0127509043843, 1827.077881778596, 1855.0181597399146, 1893.16588742058, 1665.039271049098, 1699.9053199677178, 1634.411090269636, 1985.8922191967467, 1630.6491483861796, 1706.1370240170804, 1622.3993039334866, 1647.3667214332131, 1885.6202559951766, 1694.869254294048, 1532.6196790511985, 1745.5789430245486, 1926.5161052522835, 1605.8431580650135, 1838.783083439791, 1592.0713907753013, 1740.2658353989991, 1699.8196791494827, 1909.4181313078836, 1689.8767220100542, 1863.4018098022575, 1669.3013605380306, 1712.9942237222292, 1875.9743453926108, 1733.7105429360008, 1713.1612425026606, 1587.0489644060792, 1777.139845145051, 1646.8017683117648, 1793.3305620136907, 1537.3665648315248, 1800.1892244971689, 1916.8176652233535, 1764.7208190869892, 1944.898723672201, 1820.6397284300751, 1687.5886351975703, 1820.141349159539, 1931.855810141564, 1826.5938461986298, 1919.7159813048684, 1798.9564689997399, 1808.731566161058, 1814.1579128523688, 1760.598766852147, 1473.8542681250556, 1738.4064208187458, 1744.8237645939762, 1873.7929343314738, 2009.757136362828, 2002.6613081207122, 1699.9749041377124, 1815.5520080471406, 1835.947700439985, 1607.4084737101425, 1583.9691780433377, 1591.0907872433158, 1611.4594820124146, 1997.664034970133, 1826.2322382133384, 1537.0957079918192, 1790.0496480103795, 1690.6544806740515, 1833.1561290285222, 1647.1347893381765, 1678.6523518462482, 1859.4646831305797, 1722.0628543163193, 1731.5961143264872, 1745.7029752904868, 1847.3595081426379, 1765.0952230847763, 1833.508486222964, 1929.176212898244, 1934.0991805841336, 1850.7895656465457, 1953.2540281882075, 1767.5643093693814, 1914.271550419896, 1761.8139442272382, 1794.73925568754, 1728.6550248957456, 1744.5691827603823, 1880.7887890747688, 1921.2112163690613, 1737.5529464646272, 1740.3649047980878, 1757.2999407051702, 1756.541626438226, 1813.9423466238727, 1627.1900853972315, 1857.7635506682795, 1830.0157821942464, 1731.1816732699021, 1580.7947783790237, 1848.9118207163012, 1867.5645707234642, 1562.5629633728083, 1722.163319858945, 1638.1602698311121, 2049.739763481396, 1934.2499623168976, 1610.0366292785686, 1833.347505867684, 1889.9608133095455, 1761.7006923244203, 1823.5813425121319, 1829.76517448723, 1730.970821386731, 1708.9292560153192, 1688.0024697054969, 1888.2202624410968, 1869.6265983496867, 1861.9410830158972, 1668.7434642099154, 1672.9597660928262, 1681.1722016156186, 1601.5687013093568, 1736.4402079519004, 1714.0872925195624, 1668.9854911235618, 1893.1944148210946, 1762.7738097489646, 1612.6778726755972, 1661.0358982018859, 1787.3682083691253, 1639.5322529098717, 1665.4025888435647, 1639.575865424732, 1613.6323821391593, 1916.1522428269177, 1581.6599686967072, 1391.2522854127542, 1621.0171691503956, 1664.8390722355643, 1873.1174749982406, 1506.7862783224919, 2033.5108673929935, 1836.7064687899688, 1965.6429684885616, 1927.1728674679748, 1688.4769708657655, 1693.5783618552273, 1842.5092215852812, 1762.6460782757863, 1935.3791519805081, 1829.9315959587093, 1887.6838314703261, 1609.4165320909099, 1816.3228143079432, 1909.5925540854905, 1719.5149112267936, 1656.778936196638, 1559.0596020208382, 1546.998541829317, 1672.9148927112333, 1583.0229473442837, 1534.8124358182197, 1767.9471259946404, 1636.7318940994003, 1840.242222561222, 1769.1744891439935, 1830.369307821274, 1737.179725544417, 2020.786413868518, 1685.989816988961, 1638.1419659967996, 1667.751018614359, 1595.9580744899856, 1963.2641453214924, 1605.8284557739282, 1674.1899421791275, 1647.9954701458905, 1615.8592555084747, 1743.0641446545162, 1856.3131639653643, 1578.7324401631006, 2094.4668769924797, 1903.46088273008, 2137.650275775496, 1588.6921269336872, 1648.2727600228538, 1524.9671282778468, 1570.9785440716032, 1651.0762221563834, 1715.76678353862, 1665.3697937776756, 1880.1314662323057, 1780.2600818116646, 1987.412259923206, 1618.033423685699, 1594.3432027454278, 1635.9644604259815, 1650.4898642481235, 1721.9758312867675, 1869.858132952871, 1653.8816221590187, 1807.1103150284957, 1808.116592339944, 1797.735535952753, 1941.7166099987421, 1965.5096351712916, 1864.168087783504, 2007.1052175656873, 1712.0186282655359, 1369.0222594061097, 1825.4234240931607, 1758.6131082568356, 1497.4360081529576, 1619.355152329424, 1622.2788965434563, 1665.1800776781017, 1696.1623073743617, 1535.291294283969, 1603.3013565706035, 1639.5304900981303, 1766.7761671349085, 1736.2166603919486, 1820.420149707647, 1532.1574357818854, 1654.6067079069944, 1681.9719882834856, 1721.1560582740874, 1911.8060460044255, 1710.2919913172807, 1715.558457694278, 1808.6883235346081, 1526.567658603174, 2005.6974727102456, 1826.3126151362576, 1737.4237367659402, 1727.3317105170015, 1787.0022613143924, 1783.8575123678852, 1704.982910114521, 1710.2685829268921, 1620.3100374380751, 1747.043451685699, 1659.6812475795803, 1662.7228234650647, 1552.7558635787873, 1942.7007737168726, 1845.728157201837, 1436.5155488149778, 1784.0761166708717, 1982.3512833314664, 1785.7991607192, 1847.5515474496888, 1530.2183436401385, 1760.6445100330222, 1531.5188694587678, 1695.3483927279021, 1757.7553570057794, 1670.5451720392086, 1951.4034073661587, 1739.8099155358996, 1583.039403310489, 1675.200382853362, 1906.2757654032043, 1600.6276678611675, 1860.8427937750907, 1815.216439133489, 1494.0549451483687, 1643.3039676882493, 1747.487111617404, 1595.7878288454033, 1936.8809498679648, 1879.1109496163012, 1753.9766439074133, 1514.3436974616752, 1952.3618227992656, 1782.9358663279156, 1613.3870609696332, 1916.0730787326981, 1552.306322940596, 1993.8039635124805, 1867.2121691042778, 1904.0075108316332, 1936.9530201885714, 1799.89643923133, 1747.0189696595976, 1719.8682930432992, 1809.8960616551642, 1720.6386390106586, 1688.671840478242, 1744.0478882592693, 1688.280511118376, 1930.7166362554938, 1519.1902232394114, 1813.1678638909625, 1902.1138683762993, 1728.171126384489, 1746.3012621304986, 1706.8235314116137, 1587.3028176528271, 1541.594954119001, 1848.501338198374, 2052.859499460026, 1724.1141958249232, 1659.4767092399752, 1825.5665113543807, 1961.1457640473868, 1608.992338846192, 1806.1559092901466, 1576.0575944254306, 1611.4902237400784, 1654.2898042489608, 1616.4562007343425, 1653.4038806669753, 1794.0664648891927, 1817.061628627083, 1848.437187037453, 1763.4289658378148, 1588.4533658196438, 1605.7174969612545, 1827.7254315123855, 1814.738167925535, 1843.9508476404435, 1768.2978889313804, 1573.05449598221, 1886.25957176547, 1951.179389153386, 1543.572778238496, 1746.7527820804094, 1834.269649301922, 1719.2634251969312, 1813.2764324183138, 1606.214276913991, 2131.326541447734, 1658.2699386578352, 1999.8763378602205, 1692.890078932842, 1970.8094801903446, 1561.0386613253902, 1645.9649396609807, 1775.407366972614, 1933.938235934032, 1692.2006146224485, 1776.3774608474505, 1638.3297412721945, 1870.2455374786666, 1802.3967684655827, 1708.9484080044215, 1753.164750979296, 1737.973738349781, 1739.2777670735454, 1531.6378274795597, 1439.770356380411, 1711.2086753698932, 1649.8807910609441, 1963.4278887604642, 1553.0945502435127, 1783.2220636905356, 1822.265385667621, 1637.7514327041958, 1487.069225101874, 1653.7518656007796, 1627.372399109984, 1934.9383195405203, 1788.813811286132, 1792.1145260278713, 1734.3207993296796, 1543.588144622467, 1617.9070360777807, 1737.6679631174202, 1641.6970713385815, 1778.2000338739042, 1806.3956574619604, 1690.8606817280797, 1806.7129199845174, 1724.4697921229988, 1685.6554980151461, 1844.009663265912, 1883.8964127141085, 1941.8693860201934, 1845.9034822629246, 1694.6050407240843, 1685.6357334618351, 1704.941021235303, 1795.1672989874385, 1741.9501471354647, 1929.1053479308275, 1733.3929256855865, 1720.2395339778473, 1694.8688796623132, 1933.732657301723, 1886.929351737854, 1818.0547243339852, 1686.6645395437927, 1757.1476935050878, 1887.931264225846, 1550.6756308062036, 1768.2220741372082, 1837.6353543101498, 1712.5805723826484, 1637.0140062739617, 1864.5516252785937, 1802.1524865523236, 1831.729069823311, 1867.4210690221307, 1691.0724332791078]
  diff_ent_sum = [130.64515875667794, 129.03429399266471, 123.35972195195725, 120.3123131947649, 124.67958513402384, 138.4715647983192, 143.8757784965932, 136.15493376100488, 128.76811181309208, 132.36325952960763, 130.65528330753546, 134.33263632532325, 136.27457782075814, 135.35803719970144, 133.56484329522195, 133.99424533058402, 131.97290000404448, 144.37016960573482, 131.79625665012892, 108.22862523483208, 149.4504850671908, 140.7389712674683, 117.56361900564556, 126.64926736263762, 141.8902712545145, 139.19616618315348, 147.37090571321764, 132.41628727083443, 148.88068071754458, 146.9764375816948, 134.88068071754458, 147.59372423974165, 140.88984057992974, 156.60314969753796, 122.59433697150027, 130.0120000213522, 141.84826219537453, 133.09505944546686, 140.1967777409713, 132.36724475984306, 133.81501304379108, 135.21047688390087, 135.42190955556927, 131.67055963105614, 146.0796755502815, 135.82065137222529, 123.7004997859787, 135.071309302888, 132.7997942277793, 134.7389712674683, 124.20690229182883, 136.79699275761175, 133.7125686901961, 136.71868515133158, 140.5510866447835, 143.770425101166, 130.41959626749528, 139.8525358805077, 143.20336471417846, 126.83472813161849, 145.95520282078513, 130.22155007953134, 129.16863290393442, 145.4246535182279, 132.32552415560087, 133.6416211790276, 127.91487851390097, 137.1914608891346, 123.33909992280623, 136.23273384079172, 124.94144617034671, 135.42465351822793, 138.71588368116403, 141.2507541269711, 136.95334999539057, 133.71493503639107, 137.5503505373007, 155.44357499106363, 135.62971735398372, 137.766903567215, 135.45201478966536, 125.77744274895788, 142.6391057973584, 130.2876654058699, 143.4289272033611, 138.30523803946414, 133.55776813992122, 134.36995706844468, 132.87364726569317, 135.6647087653318, 114.10567217841796, 107.19146088913463, 149.11814703177112, 130.75361905517082, 140.04799313559425, 143.49940420245798, 130.22380576712672, 142.69559756502736, 132.7863606802609, 137.76126523878082, 135.832249764371, 131.4504850671908, 134.6132742483955, 128.2403064731935, 141.45790266981135, 127.18735228317493, 139.84084459275402, 138.37444329086804, 126.8416382077457, 139.20442392458133, 132.65100962240226, 138.32832562576843, 138.94561228381522, 139.01243069593693, 150.05917689685464, 119.49249412633077, 136.27355562477692, 142.39045572187152, 138.01474398401086, 119.28310914732516, 136.1111454276786, 116.81836973820839, 138.7808152474347, 131.83119055396816, 134.91549124565964, 124.19952170362996, 148.52942120928913, 138.10707383614061, 124.7303764390853, 143.8261968050515, 129.5186681226135, 147.34202476869797, 150.00306274564943, 135.12073596464847, 141.36231088483467, 142.04621386140792, 137.36388806542578, 132.73486266150866, 113.86820586419144, 132.66976601606444, 142.5075579125613, 141.81208819789936, 138.37444329086804, 131.91195366800926, 148.22291472283234, 136.1650583118624, 138.85074056262204, 133.98408376530483, 126.75760428540626, 146.37016960573482, 140.8694969562842, 126.36584846248502, 131.55035053730072, 132.56732166246942, 121.15999101173752, 127.48541897103003, 129.89437986047412, 136.4162872708344, 148.5032842274281, 148.3960011546977, 128.79699275761175, 151.0992255589354, 135.19324016332095, 139.2104398694792, 127.53312386611304, 143.06012554162763, 141.4504850671908, 136.02745746774576, 129.56484329522195, 136.32247476004406, 134.0071713516091, 141.08321312793186, 127.87151486085232, 135.37090571321764, 144.29664321108115, 132.61601821105418, 145.84826219537453, 132.40769244245143, 135.6647087653318, 130.93442852255487, 135.45756022249157, 126.96767767413829, 145.08041165776433, 137.5085065573343, 127.57063665343739, 143.7151475736812, 130.08531387871568, 123.36231088483464, 150.50222501702524, 125.48541897103004, 138.7445167002945, 144.17954102039138, 134.04621386140795, 135.0915954190247, 145.60562806478552, 137.143978580734, 131.28721775328484, 130.5251317200964, 131.52985188387385, 133.62971735398372, 129.5503505373007, 145.81654276626563, 144.0999616664182, 134.12859468554865, 123.53159414363853, 123.63371530134377, 132.105672178418, 136.5253126033295, 144.0796755502815, 123.44308671600037, 136.1607846267292, 127.35489328221415, 134.95166524313476, 145.26418767448942, 131.8525358805077, 150.5308005286468, 132.26065009683907, 121.64729116151882, 135.69639118001905, 115.0210255243199, 136.33848719104756, 134.0908593115419, 125.75715663282121, 144.41628727083443, 143.06012554162763, 140.6048344497938, 134.04799313559428, 141.60668727518834, 138.5049689796839, 148.48757722932274, 133.50402033491096, 140.75087509251216, 123.33909992280623, 152.6593919134951, 141.8611307088907, 142.8269329125343, 144.21880611687268, 136.64184976001707, 136.3557239116275, 150.5235703435648, 124.65100962240226, 126.40235954691536, 138.83883673757816, 151.31619321973503, 147.7354336898179, 138.17954102039138, 140.80995579305846, 134.913929869128, 139.25985648184738, 146.83456305244496, 138.89364375299132, 130.5251317200964, 134.32832562576843, 122.9065122665075, 123.73406904651694, 130.20244772346254, 136.08675070558223, 131.89886608289748, 137.41880265250356, 130.51204413498465, 141.53570274959816, 130.51204413498462, 147.0657638700618, 121.72945944836941, 120.96026007151777, 136.71588368116403, 131.88421829519496, 143.27434923976864, 138.55525275825204, 131.55188025977523, 125.38555350092018, 131.43583727948828, 125.84826219537453, 147.6935897098515, 144.629286679399, 120.72884671661079, 140.88068071754455, 127.56310103545727, 133.9407100628639, 122.37033468490837, 130.85074056262204, 133.56484329522195, 135.0542746759033, 134.45402264484122, 135.63145961374838, 143.74839672526466, 137.13086051550601, 136.71868515133158, 139.994245330584, 134.2215500795313, 139.68948110389186, 142.66066366118812, 130.23862172093772, 139.2872177532848, 136.65375358506094, 130.3224747600441, 137.71667729615575, 134.44953642241785, 134.64808477651053, 159.88904696493807, 138.82871218672065, 141.44357499106363, 124.4137083873493, 134.13133864820733, 123.58945055460843, 134.87775587165285, 138.3283256257684, 121.2856880308103, 136.24463766583557, 139.45612339562499, 148.02592774527125, 120.81833808415132, 133.56306402103561, 129.15724704907888, 126.93870220768804, 140.42370487345494, 130.72025188822778, 130.78979422658682, 133.4101708096989, 143.53159414363853, 134.69712728750187, 132.6668411701727, 142.9935092231012, 140.4743087609779, 134.73469758233512, 128.3052380394642, 123.63556821970806, 132.3541571747313, 139.48958508449857, 138.96589839995195, 138.14888080168535, 133.62519411713873, 128.825968224062, 138.66976601606444, 143.3828095382615, 128.8894776395228, 143.5503505373007, 136.66117118768148, 132.3427608761808, 126.72706744242444, 143.8261968050515, 131.95189382412426, 136.99245001269833, 129.515581712635, 131.07630305180464, 126.61601821105417, 137.29412782941205, 133.59926967256786, 123.50801828227101, 133.0915954190247, 138.0999616664182, 131.1016463257043, 132.21864103769914, 141.82065137222526, 127.98408376530483, 138.86039460140788, 124.4974333617038, 131.83119055396816, 129.04564283309864, 138.3283256257684, 116.93150367666311, 142.51768246341882, 109.90450441133166, 136.57417423108774, 140.28922560846067, 131.65280494028798, 125.73823515998548, 136.3486117419051, 144.55114415229238, 109.20872926377159, 144.8867336768641, 135.19324016332092, 131.75441267016254, 129.32186320222633, 133.40864108722442, 130.5308005286468, 149.97981008017163, 137.51969031859466, 137.73268972715925, 145.6733035937148, 135.17722773231742, 130.51340877828562, 145.51541663346146, 140.28648164580198, 133.48666023860682, 134.40769244245143, 134.13184617470066, 135.0284431269404, 140.77823636394956, 136.57417423108777, 146.6593919134951, 136.01200002135218, 137.5559888657349, 129.05754665814254, 135.5357027495982, 144.2069022918288, 138.11292470186493, 154.85074056262204, 136.48621258602174, 136.85002049883855, 135.25075412697106, 137.06165526410217, 121.92195366920171, 138.4555523673157, 138.91567212889265, 136.04621386140795, 126.41628727083443, 118.14184734983397, 134.86192432388242, 134.91567212889268, 127.34769475118921, 136.71588368116406, 131.6056280647855, 140.5511441522924, 114.10567217841796, 134.68700273664436, 140.05175929423416, 117.93813117937877, 143.53570274959816, 131.88421829519496, 133.98408376530483, 133.44357499106363, 127.40864108722442, 124.85622848793933, 119.57343812360493, 125.84084459275402, 141.09337469321105, 135.02519163778842, 134.20262860669564, 129.7571566328212, 126.71283428560727, 138.50930017232596, 132.4297208183528, 136.24874627179523, 132.21880611687266, 129.0284431269404, 147.83529915992779, 132.64393446710153, 131.5964682024003, 136.29486393689484, 145.6634844757554, 125.00637773661735, 127.03220928558025, 137.44189023880784, 134.70886603337217, 148.0796755502815, 129.56484329522198, 127.27709320242728, 123.60943123784702, 136.75087509251213, 127.76126523878082, 129.61528210357133, 139.85838674623204, 123.77591302648337, 147.08321312793188, 140.80995579305846, 140.00009619630833, 127.18738929759661, 136.98609162048066, 142.83456305244496, 130.34276087618076, 123.38555350092018, 128.40769244245143, 123.44308671600035, 131.9739592144473, 134.7117750752044, 143.3189371823937, 125.98682772796349, 138.4297208183528, 134.22155007953134, 139.53997643473136, 145.53159414363853, 123.53159414363853, 136.79271907247858, 142.71588368116403, 145.4155511633516, 141.81654276626563, 145.0454777539251, 142.45122117467363, 124.53643885708101, 140.26339405949776, 135.42190955556924, 134.6670220534058, 123.294127829412, 144.34450313594544, 134.7389712674683, 135.83119055396816, 128.9528617203273, 124.67684117136517, 136.68700273664436, 130.01200002135218, 129.06754314424816, 122.53821813126736, 141.63556821970806, 141.15139618335454, 139.11540306911243, 137.01535671576946, 147.39399329952187, 135.09939063810893, 135.50850655733427, 129.7571566328212, 136.12304925272244, 143.02519163778845, 120.99058437720946, 134.76963148617432, 135.83826570926888, 148.85484916858167, 129.49660273229046, 131.30186554098736, 137.74733751486178, 133.52299931525553, 142.8867336768641, 110.86667198428066, 136.52911577639102, 121.51558171263501, 135.9481276654844, 138.1537094714285, 123.95397853120873, 131.06165526410217, 140.37927196061113, 120.76378062045, 148.8867336768641, 134.7954630351372, 141.60668727518836, 138.81406439901812, 136.62792203609803, 132.60900056326233, 144.43835266115747, 131.11920624217396, 132.1146094541207, 136.7850889325679, 140.4903211919814, 136.7648028164312, 135.19909102904526, 118.67099030564086, 129.5518802597752, 144.07709666679636, 119.28294406815165, 136.79271907247858, 136.50222501702527, 136.81855062144146, 133.906283685518, 136.7088660333722, 125.73543368981792, 144.2069022918288, 125.1508886568612, 124.05384400131861, 128.20279368586915, 126.82011735833767, 131.46666257736786, 130.39756789159392, 138.03889078071796, 137.63556821970803, 128.86018206411774, 129.56484329522195, 140.07967555028154, 122.54803724922674, 129.74097912264412, 140.16916691782205, 121.00226913065771, 138.21880611687268, 128.23862172093772, 125.82327195915974, 148.73897126746832, 142.59573209491748, 155.1858225607004, 136.72884671661078, 123.99704680075156, 142.30249407680552, 142.9316845598962, 135.914878513901, 127.366797107258, 137.92606227516134, 130.99952516799902, 140.24874627179523, 132.41781699330895, 130.65528330753546, 132.06091915661932, 137.63556821970803, 124.43093505853695, 131.55776813992122, 123.34476873135662, 125.01553759900254, 130.41959626749528, 131.08595709059054, 124.40937719470723, 131.85411306109887, 135.65454720005263, 144.39753087717224, 133.09939063810893, 136.4094347022161, 145.75852127612217, 140.603149697538, 146.93459360172838, 129.55188025977523, 134.0894946682409, 144.71868515133158, 129.04564283309864, 145.68346515899398, 134.6639151503401, 122.62207117037372, 130.34017194330337, 141.766903567215, 135.99704680075155, 129.8961221202388, 141.20336471417843, 128.22155007953134, 133.97981008017163, 121.51558171263501, 139.2044239245813, 134.509300172326, 136.02181913931156, 135.55776813992125, 137.92606227516134, 120.62156364388039, 110.68974787324389, 128.93442852255487, 133.39106845363017, 143.65454720005263, 144.2053725693543, 125.82327195915974, 132.31642180072453, 133.1901537533425, 131.11540306911243, 124.15767772366355, 129.5022410607246, 133.38988469356224, 128.49739634728212, 142.30676776193866, 136.65375358506094, 124.82871218672065, 136.62928667939903, 132.39600115469773, 140.603149697538, 142.16352858938788, 133.8611307088907, 130.06073827338625, 136.55663207760972, 148.1189406467628, 143.5503505373007, 126.67958513402384, 141.60562806478546, 140.38634711591186, 134.55388811495106, 125.62438445844768, 132.7346975823351, 123.93538721672009, 136.69559756502736, 139.38006557560283, 148.02592774527125, 141.07630305180467, 139.46666257736786, 135.96099617900057, 140.58108430721495, 141.68168588480765, 137.0993906381089, 128.8694969562842, 153.89612212023883, 124.0567530431508, 127.13263978969236, 135.2931056334308, 133.71222272778948, 147.81928672892428, 133.12933079303147, 136.57006562512808, 128.7346975823351, 129.5186681226135, 118.97918154435348, 125.00226913065771, 138.1635285893879, 133.47357265349507, 134.79271907247858, 145.7731690638247, 160.13769704042497, 127.35820227887503, 135.4289272033611, 136.260469213606, 138.54940189252773, 120.42925030628115, 138.17970609956492, 143.09922555893536, 117.49660273229043, 124.80873150348208, 143.1599910117375, 133.914878513901, 135.21907171228386, 146.448477212015, 128.61327424839553, 135.62438445844768, 145.37695867253717, 129.31568569324173, 131.95189382412426, 128.51946173760518, 134.12168460942144, 144.0999616664182, 152.6348321122252, 133.84237431522854, 112.11534546863389, 126.82129458410014, 148.93442852255484, 132.8185506214415, 126.46586896237618, 135.75424759098897, 150.88348218771213, 144.66117118768148, 134.55388811495106, 140.98054618765445, 142.97144383277814, 123.8525358805077, 136.1257932153811, 146.71868515133158, 134.52911577639105, 139.34507416425473, 131.9739592144473, 119.18307859804176, 126.91841609155135, 135.99598759034865, 123.42172867233619, 133.2669316371481, 133.16706616703823, 139.64162117902757, 133.19925610821878, 135.28568803081026, 124.26475870279874, 134.38753087597976, 130.93442852255487, 144.74913283274745, 134.66117118768148, 121.6629294911455, 142.21880611687268, 120.6881992138369, 120.36995706844469, 134.4903211919814, 131.47784633862827, 147.2931056334308, 121.81501304379113, 129.20031531862165, 129.12522218707184, 138.81406439901812, 138.30523803946414, 123.04131164045657, 130.7928841516521, 136.93442852255484, 137.06720069692838, 154.85074056262204, 131.83119055396816, 147.9959875903487, 135.35972195195725, 132.85484916858167, 128.39756789159392, 134.55114415229238, 125.06029062080117, 131.25711251918872, 123.84355807529643, 139.08041165776433, 123.70823749755404, 121.2669316371481, 133.05754665814248, 142.0999616664182, 144.82418894987566, 133.19324016332092, 134.5700656251281, 137.09337469321105, 133.6228647853654, 135.94634839129805, 137.42190955556924, 147.60973667074512, 138.79546303513723, 148.87208588916158, 126.92857765683054, 132.34017194330337, 126.07108072189853, 133.37695867253717, 123.62871565108972, 141.14534322403497, 139.50402033491096, 120.79546303513725, 139.85838674623204, 145.51541663346148, 125.95520282078513, 131.75008147752044, 135.49660273229043, 130.60000578005065, 122.37927196061113, 132.72884671661075, 131.06012554162766, 131.135383752351, 146.70301516764786, 140.87382814892626, 117.40415486480107, 138.0908593115419, 127.51969031859467, 134.54406899699165, 140.29664321108118, 134.98054618765445, 140.4743087609779, 134.1572630927782, 141.53570274959816, 145.99704680075155, 138.2312041183172, 140.3672447598431, 132.61601821105418, 140.5511441522924, 117.08595709059055, 130.2053725693543, 134.09585306045855, 127.50402033491095, 133.46802722066886, 143.2393578284205, 117.17133985217143, 135.35214931955545, 125.1970063219608, 133.32906173325122, 120.80288063775775, 130.93442852255487, 141.50402033491093, 132.7808152474347, 138.0218191393116, 129.88421829519496, 129.9407100628639, 137.05153071324466, 136.28648164580198, 138.79546303513723, 136.2446376658356, 140.32552415560087, 128.36325952960763, 132.33263632532325, 129.34507416425473, 132.4958666248076, 132.7389712674683, 134.56732166246942, 142.2403064731935, 136.91392986912803, 123.01553759900257, 126.3090234495341, 147.68346515899398, 140.7808152474347, 126.36759072224967, 123.00968673327823, 133.6150695662812, 148.76688752351566, 132.70678132628774, 133.85427814027238, 125.77024421793294, 150.62517807343937, 135.0284431269404, 148.99350922310117, 131.14550830320852, 120.35692038882001, 118.89532850524711, 133.99424533058402, 122.3646241729086, 144.56715658329588, 132.3123131947649, 144.91841609155134, 124.91841609155134, 132.97780222499577, 143.20891014700464, 124.69559756502737, 129.2856880308103, 145.98408376530483, 129.454758752324, 145.97290000404445, 132.91567212889265, 129.67483331618934, 129.07855873940005, 145.35061959708094, 142.04621386140792, 126.07709666679638, 142.0710807218985, 126.8619613383041, 136.86039460140788, 131.4448162586404, 131.26693163714813, 143.15724704907888, 129.36679710725798, 143.57343812360492, 135.09764837834425, 132.39045572187152, 142.61327424839553, 142.50930017232596, 131.49660273229043, 146.597261817392, 142.55525275825204, 133.8352991599278, 129.06754314424816, 130.19385289507957, 124.7928841516521, 148.5161527409443, 134.41628727083443, 139.41138504988305, 145.35214931955548, 127.35820227887503, 132.81164054531428, 129.17722773231745, 140.8534845252807, 146.57143026842908, 135.63145961374838, 141.7466174510783, 150.42819109587828, 142.43657338697113, 132.42234023015396, 127.40589712456574, 138.50496897968392, 128.95733522562603, 130.56990054595457, 126.36431874001049, 142.40510350957402, 140.30523803946417, 143.4707711833275, 145.4100057305254, 137.70049978597868, 140.60137042335163, 137.16706616703823, 142.98334765782198, 144.1549337610049, 135.15706616584575, 122.98316677458891, 132.87657211158492, 127.74254585954033, 141.35972195195725, 126.3557239116275, 133.14123461807532, 123.89992529330034, 134.5860780561316, 139.83224976437103, 134.15370947142847, 147.7544126701625, 130.8694969562842, 141.5503505373007, 135.04411311062412, 146.1866161756921, 126.0132243109286, 137.74733751486178, 134.10292821575928, 131.5574256926014, 141.72633133494165, 139.14397858073403, 116.45966097327538, 128.1387562508278, 141.4707711833275, 125.57063665343739, 139.02102552431987, 128.03711150653163, 129.04411311062412, 137.1195116750721, 130.66391515034013, 128.93442852255487, 141.41000573052537, 136.70886603337217, 131.45756022249157, 140.48447032625705, 145.89886608289748, 143.08041165776433, 137.36231088483467, 137.74733751486175, 142.5235703435648, 145.2840032785545, 139.95825221634192, 129.99873155300733, 133.40864108722442, 130.72142911399024, 141.2104398694792, 126.90859697359194, 138.42925030628112, 131.89886608289746, 136.46312499971748, 126.82871218672065, 121.86667614171691, 128.61142133003125, 134.2847393860373, 123.00968673327823, 137.14123461807532, 131.17274150989405, 141.11229616604678, 153.46391861470923, 123.9579467834438, 127.44790618370567, 124.43835266115745, 125.33220565073857, 138.71588368116406, 132.3224747600441, 139.3189371823937, 140.08531387871568, 134.48757722932274, 147.83529915992779, 133.92195366920168, 142.90859697359193, 129.89437986047412, 140.61601821105415, 131.143978580734, 128.39045572187152, 124.16352858938788, 138.03783157031512, 135.79900061278758, 135.34370952095375, 132.5308005286468, 119.07736226220756, 141.27256996558228, 139.24110008818522]

  cig_counter = collections.Counter(bucket(cig_ent_sum,buck1))
  diff_counter = collections.Counter(bucket(diff_ent_sum,buck2))

  cig_mean = diff_mean = 0

  plt.figure(1)
  plt.ylabel('Anzahl Sequenzpaare')
  plt.xlabel('Entropie in Bit')
  maxkey = max(max(cig_counter.keys()),max(diff_counter.keys()))
  maxend = max(cig_counter.most_common(1)[0][1], 
               diff_counter.most_common(1)[0][1])
  plt.axis([0, maxkey * 1.2, 0, maxend * 1.2])

  plt.plot(cig_counter.keys(), cig_counter.values(), 
           'bo', label="CIGAR")

  cig_mean = float(sum(cig_ent_sum))/len(cig_ent_sum)
  print "Cig Entropy Mean:", cig_mean

  plt.plot(diff_counter.keys(), diff_counter.values(), 
           'ro', label="Differenzen")

  diff_mean = float(sum(diff_ent_sum))/len(diff_ent_sum)
  print "Diff Entropy Mean:", diff_mean

  plt.legend(loc='upper right')

  print "cig/diff:", float(cig_mean)/diff_mean
  print "diff/cig:", float(diff_mean)/cig_mean
  print cig_counter
  print diff_counter
  print [int(i) for i in cig_counter.keys()]
  print diff_counter.keys()

  plt.show()


def cigar_kodierung(ciglist, mode):
  bit_sum = []

  for cigar in ciglist:
    if mode == "huffman":
      cig_count_sum = []
      bits = 2
      for cig_count, cig_symbol in Cigar_Pattern.parse_cigar(cigar):
        bits += 1
        #if cig_symbol == 'M':
          # bit_sum.append(1)
         # bits += 1
        #else:
          # bit_sum.append(2)
          #bits += 2
        cig_count_sum.append(cig_count)
      bit_sum.append(huffman(cig_count_sum) + bits)
    elif mode == "binary":
      # naiive binary coding for cigar
      bin_count = 0

      for cig_count, cig_symbol in Cigar_Pattern.parse_cigar(cigar):
        # cig_count_sum.append(cig_count)
        bin_count += 2
      # bit_sum.append((int(math.ceil(math.log(len(cig_count_sum),2))) * len(
      #                cig_count_sum)) + 2 * len(cig_count_sum))
      bit_sum.append(int(math.ceil(math.log(bin_count,2))) * bin_count)
      
    else:
      # unary coding
      m_count = i_count = d_count = add = 0
      cig_count_sum = []
      for cig_count, cig_symbol in Cigar_Pattern.parse_cigar(cigar):
        if cig_symbol == 'M':
          m_count += 1
        elif cig_symbol == 'D':
          d_count += 1
        else:
          i_count += 1
        cig_count_sum.append(cig_count)
        if d_count < i_count:
          add = m_count + i_count * 2 + d_count * 3
        else:
          add = m_count + d_count * 2 + i_count * 3
      #for element in unary(cig_count_sum):
      #  bit_sum.append(element + add)
      bit_sum.append(unary(cig_count_sum) + add)

  return bit_sum

def tp_kodierung(TP, mode):

  bit_sum = []
  if mode == "binary":
    # naiive binary coding for differences
    bit_sum.append(int(math.ceil(math.log(len(TP),2)))*len(TP))
  elif mode == "unary":
    # unary coding for differences
    bit_sum.append(unary(TP))
  else:
    # huffman coding for differences
    bit_sum.append(huffman(TP))
  return bit_sum

def multiplot(bs1, bs2, bs3, buck1, buck2, buck3, method, t):

  
  counter1 = collections.Counter(bucket(bs1, buck1))
  counter2 = collections.Counter(bucket(bs2, buck2))
  counter3 = collections.Counter(bucket(bs3, buck3))

  bin_mean = una_mean = huf_mean = 0

  if method == "tracepoint":

    plt.figure(1)
    plt.ylabel('Anzahl der Sequenzpaare')
    plt.xlabel('Größe der Kodierung in Bit')

    maxkey = max(max(counter2.keys()),max(counter3.keys()))
    maxend = max(counter2.most_common(1)[0][1],
                 counter3.most_common(1)[0][1])
    plt.axis([0, maxkey * 1.2, 0, maxend * 1.2])
  
    plt.plot(counter2.keys(), counter2.values(), 'co', 
             label="Unär")
    plt.plot(counter3.keys(), counter3.values(), 'ro', 
             label="Huffman")
    plt.legend(loc='upper right')

  else: # cigar

    plt.figure(1)
    plt.ylabel('Anzahl der Sequenzpaare')
    plt.xlabel('Größe der Kodierung in Bit')

    maxkey = max(max(counter1.keys()),max(counter2.keys()),max(counter3.keys()))
    maxend = max(counter1.most_common(1)[0][1],counter2.most_common(1)[0][1],
                 counter3.most_common(1)[0][1])
    #maxkey = max(max(counter1.keys()),max(counter2.keys()))
    #maxend = max(counter1.most_common(1)[0][1],counter2.most_common(1)[0][1])
    plt.axis([0, maxkey * 1.2, 0, maxend * 1.2])
  
    plt.plot(counter1.keys(), counter1.values(),'bo', 
             label="Binär")
    plt.plot(counter2.keys(), counter2.values(), 'co', 
             label="Unär")
    plt.plot(counter3.keys(), counter3.values(), 'ro', 
             label="Huffman")
    plt.legend(loc='upper right')

    """
    plt.figure(2)
    plt.ylabel('Anzahl der Sequenzpaare')
    plt.xlabel('Größe der Kodierung in Bit')
    plt.axis([0, max(counter3.keys()) * 1.2, 
              0, counter3.most_common(1)[0][1] * 1.2])

    plt.plot(counter3.keys(), counter3.values(), 'ro', 
           label="Huffman")
    plt.legend(loc='upper right')
    """

  bin_mean = float(sum(bs1))/len(bs1)
  una_mean = float(sum(bs2))/len(bs2)
  huf_mean = float(sum(bs3))/len(bs3)

  print ""
  print "Binärer Counter:\t", counter1
  print ""
  print "Unärer Counter:\t\t", counter2
  #print "Unäre BITSUM:\t\t", bs2
  print ""
  print "Huffman Counter:\t", counter3
  print "##########################"
  print "Binäre Keys:\t", counter1.keys()
  print ""
  print "Unäre Keys:\t", counter2.keys()
  print ""
  print "Huffman Keys:\t", counter3.keys()
  print ""
  print "Bin/Una:",float(bin_mean)/una_mean
  print "Una/Bin:",float(una_mean)/bin_mean
  print ""

  print "Bin/Huf:",float(bin_mean)/huf_mean
  print "Huf/Bin:",float(huf_mean)/bin_mean
  print ""

  print "Huf/Una:",float(huf_mean)/una_mean
  print "Una/Huf:",float(una_mean)/huf_mean
  print ""


  print "MAX Bin:", max(counter1.keys())
  print "MIN Bin:", min(counter1.keys())
  print "Binary Mean:", bin_mean
  print ""

  print "MAX Una:", max(counter2.keys())
  print "MIN Una:", min(counter2.keys())
  print "Unary Mean:", una_mean
  print ""

  print "MAX Huf:", max(counter3.keys())
  print "MIN Huf:", min(counter3.keys())
  print "Huffman Mean:", huf_mean
  print ""

  print "Calculation complete.\nClock time: %.2f seconds." % (time.clock() - t)
  plt.show()


def deltaplot(bs1, bs2, bs3, bs4, buck1, buck2, buck3, buck4, t):

  
  counter1 = collections.Counter(bucket(bs1, buck1))
  counter2 = collections.Counter(bucket(bs2, buck2))
  counter3 = collections.Counter(bucket(bs3, buck3))
  counter4 = collections.Counter(bucket(bs4, buck4))

  mean1 = mean2 = mean3 = mean4 = 0


  plt.figure(1)
  plt.ylabel('Anzahl der Sequenzpaare')
  plt.xlabel('Größe der Kodierung in Bit')

  maxkey = max(max(counter1.keys()),max(counter2.keys()),max(counter3.keys()), 
               max(counter4.keys()))
  maxend = max(counter1.most_common(1)[0][1],
               counter2.most_common(1)[0][1],
               counter3.most_common(1)[0][1],
               counter4.most_common(1)[0][1])

  plt.axis([0, maxkey * 1.2, 0, maxend * 1.2])

  plt.plot(counter1.keys(), counter1.values(), 'bo',
           label="50") 
  plt.plot(counter2.keys(), counter2.values(), 'co', 
           label="100")
  plt.plot(counter3.keys(), counter3.values(), 'ro', 
           label="200")
  plt.plot(counter4.keys(), counter4.values(), 'go', 
           label="500")

  plt.legend(loc='upper right')


  mean1 = float(sum(bs1))/len(bs1)
  mean2 = float(sum(bs2))/len(bs2)
  mean3 = float(sum(bs3))/len(bs3)
  mean4 = float(sum(bs4))/len(bs4)

  print ""
  print "Counter1:\t", counter1
  print ""
  print "Counter2:\t", counter2
  print ""
  print "Counter3:\t", counter3
  print ""
  print "Counter4:\t", counter4
  print "##########################"
  print "Keys1:\t", counter1.keys()
  print ""
  print "Keys2:\t", counter2.keys()
  print ""
  print "Keys3:\t", counter3.keys()
  print ""
  print "Keys4:\t", counter4.keys()
  print ""

  print "MAX 50:", max(counter1.keys())
  print "MIN 50:", min(counter1.keys())
  print "Mean1:", mean1
  print ""

  print "MAX 100:", max(counter2.keys())
  print "MIN 100:", min(counter2.keys())
  print "Mean2:", mean2
  print ""

  print "MAX 200:", max(counter3.keys())
  print "MIN 200:", min(counter3.keys())
  print "Mean3:", mean3
  print ""

  print "MAX 500:", max(counter4.keys())
  print "MIN 500:", min(counter4.keys())
  print "Mean4:", mean4
  print ""

  print "Calculation complete.\nClock time: %.2f seconds." % (time.clock() - t)
  plt.show()

def cigmultidelta(amount,length,err_rate,d1,d2,d3,d4,t):

  start_seq1 = start_seq2 = 0
  deltas = [d1,d2,d3,d4]
  bs1 = []
  bs2 = []
  bs3 = []
  bs4 = []


  random_seq_list = tp_calc.random_sequences(amount, length, err_rate, "acgt")
  
  for delta in deltas:
    TP = []
    for i in range(0, len(random_seq_list), 2):
      print i/2 + 1, "von", len(random_seq_list)/2, "Delta:", delta, deltas
      end_seq1 = len(random_seq_list[i])
      end_seq2 = len(random_seq_list[i + 1])
      aln = Alignment.Alignment(random_seq_list[i], random_seq_list[i + 1], 
                                start_seq1, end_seq1, start_seq2, end_seq2)

      cigar = aln.calc_cigar(aln.seq1, aln.seq2)
      tp_aln = TracePoint.TracePointAlignment(aln.seq1, aln.seq2, start_seq1,
                                end_seq1, start_seq2, end_seq2, delta, cigar)

      if i == len(random_seq_list) - 2 and delta == d4:
        print "\nBS1:\n", bs1, "\n"
        print "\nBS2:\n", bs2, "\n"
        print "\nBS3:\n", bs3, "\n"
        print "\nBS4:\n", bs4, "\n"
        deltaplot(bs1, bs2, bs3, bs4, 1, 1, 1, 1, t)
      else:
        TP.append(delta)
        TP.append(tp_aln.tp[0])
        for j in range(1, len(tp_aln.tp)):
          TP.append(tp_aln.tp[j] - tp_aln.tp[j - 1])
        if delta == d1:
          for item in tp_kodierung(TP, "tracepoint"): bs1.append(item)
        elif delta == d2:
          for item in tp_kodierung(TP, "tracepoint"): bs2.append(item)
        elif delta == d3:
          for item in tp_kodierung(TP, "tracepoint"): bs3.append(item)
        else:
          for item in tp_kodierung(TP, "tracepoint"): bs4.append(item)

def main():

  # METHOD = "cigar" 
  METHOD = "tracepoint"
  # METHOD = "entropy"
  manual = 1
  multidelta = 0
  start_seq1 = start_seq2 = 0

  t = time.clock()
  print "Läuft..."
  amount = 1000
  length = 5000
  delta = 200
  err_rate = 0.15
  bs1 = []
  bs2 = []
  bs3 = []
  TP = []

  print METHOD

  if multidelta:
    cigmultidelta(amount,length,0.15,50,100,200,500,t)

  if METHOD == "entropy":

    # Entropy
    if manual:
      plotent([], [], 75, 4, manual)
    else:
      l1, l2 = entropy(amount,length,err_rate,"acgt",delta,manual)
      plotent(l1, l2, 5, 5, manual)

  if manual:

    # bs1 = ...
    bs1 = [125, 300, 525, 700, 875, 1200, 1400, 1600, 1800, 2000, 2475, 2700, 2925, 3150, 3375, 3600, 3825, 4050, 4275, 4500, 5250, 5500, 5750, 6000, 6250, 6500, 6750, 7000, 7250, 7500, 7750, 8000, 8250, 8500, 8750, 9000, 9250, 9500, 9750, 10000, 11275, 11550, 11825, 12100, 12375, 12650, 12925, 13200, 13475, 13750, 14025, 14300, 14575, 14850, 15125, 15400, 15675, 15950, 16225, 16500, 16775, 17050, 17325, 17600, 17875, 18150, 18425, 18700, 18975, 19250, 19525, 19800, 20075, 20350, 20625, 20900, 21175, 21450, 21725, 22000, 22275, 24600, 24900, 25200, 25500, 25800, 26100, 26400, 26700, 27000, 27300, 27600, 27900, 28200, 28500, 28800, 29100, 29400, 29700, 30000, 30300, 30600, 30900, 31200, 31500, 31800, 32100, 32400, 32700, 33000, 33300, 33600, 33900, 34200, 34500, 34800, 35100, 35400, 35700, 36000, 36300, 36600, 36900, 37200, 37500, 37800, 38100, 38400, 38700, 39000, 39300, 39600, 39900, 40200, 40500, 40800, 41100, 41400, 41700, 42000, 42300, 42600, 42900, 43200, 43500, 43800, 44100, 44400, 44700, 45000, 45300, 45600, 45900, 46200, 46500, 46800, 47100, 47400, 47700, 48000, 48300, 48600, 48900, 53300, 53625, 53950, 54275, 54600, 54925, 55250, 55575, 55900, 56225, 56550, 56875, 57200, 57525, 57850, 58175, 58500, 58825, 59150, 59475, 59800, 60125, 60450, 60775, 61100, 61425, 61750, 62075, 62400, 62725, 63050, 63375, 63700, 64025, 64350, 64675, 65000, 65325, 65650, 65975, 66300, 66625, 66950, 67275, 67600, 67925, 68250, 68575, 68900, 69225, 69550, 69875, 70200, 70525, 70850, 71175, 71500, 71825, 72150, 72475, 72800, 73125, 73450, 73775, 74100, 74425, 74750, 75075, 75400, 75725, 76050, 76375, 76700, 77025, 77350, 77675, 78000, 78325, 78650, 78975, 79300, 79625, 79950, 80275, 80600, 80925, 81250, 81575, 81900, 82225, 82550, 82875, 83200, 83525, 83850, 84175, 84500, 84825, 85150, 85475, 85800, 86125, 86450, 86775, 87100, 87425, 87750, 88075, 88400, 88725, 89050, 89375, 89700, 90025, 90350, 90675, 91000, 91325, 91650, 91975, 92300, 92625, 92950, 93275, 93600, 93925, 94250, 94575, 94900, 95225, 95550, 95875, 96200, 96525, 96850, 97175, 97500, 97825, 98150, 98475, 98800, 99125, 99450, 99775, 100100, 100425, 100750, 101075, 101400, 101725, 102050, 102375, 102700, 103025, 103350, 103675, 104000, 104325, 104650, 104975, 105300, 105625, 105950, 106275, 114800, 115150, 115500, 115850, 116200, 116550, 116900, 117250, 117600, 117950, 118300, 118650, 119000, 119350, 119700, 120050, 120400, 120750, 121100, 121450, 121800, 122150, 122500, 122850, 123200, 123550, 123900, 124250, 124600, 124950, 125300, 125650, 126000, 126350, 126700, 127050, 127400, 127750, 128100, 128450, 128800, 129150, 129500, 129850, 130200, 130550, 130900, 131250, 131600, 131950, 132300, 132650, 133000, 133350, 133700, 134050, 134400, 134750, 135100, 135450, 135800, 136150, 136500, 136850, 137200, 137550, 137900, 138250, 138600, 138950, 139300, 139650, 140000, 140350, 140700, 141050, 141400, 141750, 142100, 142450, 142800, 143150, 143500, 143850, 144200, 144550, 144900, 145250, 145600, 145950, 146300, 146650, 147000, 147350, 147700, 148050, 148400, 148750, 149100, 149450, 149800, 150150, 150500, 150850, 151200, 151550, 151900, 152250, 152600, 152950, 153300, 153650, 154000, 154350, 154700, 155050, 155400, 155750, 156100, 156450, 156800, 157150, 157500, 157850, 158200, 158550, 158900, 159250, 159600, 159950, 160300, 160650, 161000, 161350, 161700, 162050, 162400, 162750, 163100, 163450, 163800, 164150, 164500, 164850, 165200, 165550, 165900, 166250, 166600, 166950, 167300, 167650, 168000, 168350, 168700, 169050, 169400, 169750, 170100, 170450, 170800, 171150, 171500, 171850, 172200, 172550, 172900, 173250, 173600, 173950, 174300, 174650, 175000, 175350, 175700, 176050, 176400, 176750, 177100, 177450, 177800, 178150, 178500, 178850, 179200, 179550, 179900, 180250, 180600, 180950, 181300, 181650, 182000, 182350, 182700, 183050, 183400, 183750, 184100, 184450, 184800, 185150, 185500, 185850, 186200, 186550, 186900, 187250, 187600, 187950, 188300, 188650, 189000, 189350, 189700, 190050, 190400, 190750, 191100, 191450, 191800, 192150, 192500, 192850, 193200, 193550, 193900, 194250, 194600, 194950, 195300, 195650, 196000, 196350, 196700, 197050, 197400, 197750, 198100, 198450, 198800, 199150, 199500, 199850, 200200, 200550, 200900, 201250, 201600, 201950, 202300, 202650, 203000, 203350, 203700, 204050, 204400, 204750, 205100, 205450, 205800, 206150, 206500, 206850, 207200, 207550, 207900, 208250, 208600, 208950, 209300, 209650, 210000, 210350, 210700, 211050, 211400, 211750, 212100, 212450, 212800, 213150, 213500, 213850, 214200, 214550, 214900, 215250, 215600, 215950, 216300, 216650, 217000, 217350, 217700, 218050, 218400, 218750, 219100, 219450, 219800, 220150, 220500, 220850, 221200, 221550, 221900, 222250, 222600, 222950, 223300, 223650, 224000, 224350, 224700, 225050, 225400, 225750, 226100, 226450, 226800, 227150, 227500, 227850, 228200, 228550, 228900, 229250, 246000, 246375, 246750, 247125, 247500, 247875, 248250, 248625, 249000, 249375, 249750, 250125, 250500, 250875, 251250, 251625, 252000, 252375, 252750, 253125, 253500, 253875, 254250, 254625, 255000, 255375, 255750, 256125, 256500, 256875, 257250, 257625, 258000, 258375, 258750, 259125, 259500, 259875, 260250, 260625, 261000, 261375, 261750, 262125, 262500, 262875, 263250, 263625, 264000, 264375, 264750, 265125, 265500, 265875, 266250, 266625, 267000, 267375, 267750, 268125, 268500, 268875, 269250, 269625, 270000, 270375, 270750, 271125, 271500, 271875, 272250, 272625, 273000, 273375, 273750, 274125, 274500, 274875, 275250, 275625, 276000, 276375, 276750, 277125, 277500, 277875, 278250, 278625, 279000, 279375, 279750, 280125, 280500, 280875, 281250, 281625, 282000, 282375, 282750, 283125, 283500, 283875, 284250, 284625, 285000, 285375, 285750, 286125, 286500, 286875, 287250, 287625, 288000, 288375, 288750, 289125, 289500, 289875, 290250, 290625, 291000, 291375, 291750, 292125, 292500, 292875, 293250, 293625, 294000, 294375, 294750, 295125, 295500, 295875, 296250, 296625, 297000, 297375, 297750, 298125, 298500, 298875, 299250, 299625, 300000, 300375, 300750, 301125, 301500, 301875, 302250, 302625, 303000, 303375, 303750, 304125, 304500, 304875, 305250, 305625, 306000, 306375, 306750, 307125, 307500, 307875, 308250, 308625, 309000, 309375, 309750, 310125, 310500, 310875, 311250, 311625, 312000, 312375, 312750, 313125, 313500, 313875, 314250, 314625, 315000, 315375, 315750, 316125, 316500, 316875, 317250, 317625, 318000, 318375, 318750, 319125, 319500, 319875, 320250, 320625, 321000, 321375, 321750, 322125, 322500, 322875, 323250, 323625, 324000, 324375, 324750, 325125, 325500, 325875, 326250, 326625, 327000, 327375, 327750, 328125, 328500, 328875, 329250, 329625, 330000, 330375, 330750, 331125, 331500, 331875, 332250, 332625, 333000, 333375, 333750, 334125, 334500, 334875, 335250, 335625, 336000, 336375, 336750, 337125, 337500, 337875, 338250, 338625, 339000, 339375, 339750, 340125, 340500, 340875, 341250, 341625, 342000, 342375, 342750, 343125, 343500, 343875, 344250, 344625, 345000, 345375, 345750, 346125, 346500, 346875, 347250, 347625, 348000, 348375, 348750, 349125, 349500, 349875, 350250, 350625, 351000, 351375, 351750, 352125, 352500, 352875, 353250, 353625, 354000, 354375, 354750, 355125, 355500, 355875, 356250, 356625, 357000, 357375, 357750, 358125, 358500, 358875, 359250, 359625, 360000, 360375, 360750, 361125, 361500, 361875, 362250, 362625, 363000, 363375, 363750, 364125, 364500, 364875, 365250, 365625, 366000, 366375, 366750, 367125, 367500, 367875, 368250, 368625, 369000, 369375, 369750, 370125, 370500, 370875, 371250, 371625, 372000, 372375, 372750, 373125, 373500, 373875, 374250, 374625]

  bs2 = [94, 224, 307, 413, 516, 605, 738, 848, 954, 1084, 1208, 1274, 1356, 1452, 1574, 1681, 1793, 1878, 1965, 2086, 2186, 2284, 2376, 2473, 2594, 2703, 2846, 2991, 3113, 3224, 3333, 3444, 3565, 3655, 3757, 3878, 3997, 4102, 4241, 4344, 4459, 4567, 4683, 4831, 4944, 5044, 5152, 5290, 5394, 5488, 5586, 5679, 5778, 5900, 6014, 6159, 6283, 6379, 6496, 6586, 6704, 6850, 6970, 7065, 7174, 7299, 7408, 7495, 7608, 7708, 7789, 7895, 8016, 8146, 8230, 8329, 8427, 8533, 8646, 8728, 8833, 8965, 9081, 9185, 9300, 9430, 9512, 9631, 9746, 9853, 9951, 10053, 10193, 10291, 10394, 10517, 10639, 10742, 10832, 10922, 11036, 11145, 11241, 11337, 11445, 11539, 11654, 11751, 11863, 11968, 12074, 12176, 12300, 12397, 12511, 12633, 12754, 12867, 13008, 13127, 13227, 13351, 13483, 13597, 13718, 13826, 13941, 14057, 14150, 14277, 14393, 14490, 14564, 14688, 14787, 14906, 14996, 15123, 15228, 15313, 15422, 15527, 15647, 15765, 15884, 15997, 16082, 16203, 16314, 16422, 16509, 16600, 16704, 16795, 16920, 17016, 17144, 17265, 17380, 17473, 17585, 17691, 17818, 17932, 18032, 18166, 18298, 18385, 18503, 18631, 18732, 18846, 18941, 19095, 19204, 19325, 19445, 19536, 19649, 19736, 19840, 19972, 20077, 20170, 20288, 20406, 20525, 20610, 20710, 20817, 20915, 21025, 21158, 21272, 21384, 21486, 21611, 21713, 21826, 21923, 22044, 22131, 22259, 22407, 22529, 22620, 22722, 22821, 22935, 23037, 23106, 23209, 23331, 23447, 23568, 23681, 23796, 23928, 24054, 24157, 24263, 24383, 24493, 24620, 24731, 24845, 24940, 25065, 25175, 25259, 25370, 25468, 25566, 25660, 25762, 25882, 25999, 26092, 26202, 26291, 26405, 26516, 26641, 26747, 26839, 26954, 27065, 27173, 27291, 27421, 27501, 27591, 27708, 27789, 27886, 28002, 28098, 28218, 28334, 28435, 28538, 28671, 28763, 28874, 28999, 29138, 29234, 29348, 29431, 29552, 29654, 29767, 29864, 29970, 30066, 30168, 30281, 30374, 30471, 30564, 30688, 30791, 30890, 31004, 31087, 31204, 31289, 31385, 31483, 31608, 31724, 31824, 31905, 32016, 32124, 32215, 32339, 32431, 32539, 32652, 32752, 32868, 32982, 33094, 33189, 33299, 33398, 33532, 33660, 33763, 33875, 34010, 34115, 34216, 34323, 34448, 34565, 34657, 34787, 34915, 35021, 35147, 35258, 35355, 35474, 35600, 35698, 35794, 35924, 36021, 36131, 36224, 36333, 36441, 36547, 36658, 36795, 36903, 37008, 37113, 37212, 37327, 37439, 37560, 37684, 37793, 37896, 38022, 38136, 38239, 38339, 38448, 38551, 38647, 38754, 38881, 39003, 39121, 39254, 39372, 39455, 39567, 39667, 39768, 39888, 39991, 40107, 40227, 40350, 40471, 40588, 40703, 40810, 40899, 41004, 41119, 41229, 41342, 41434, 41532, 41651, 41749, 41861, 41970, 42070, 42177, 42312, 42412, 42526, 42655, 42771, 42875, 42993, 43086, 43184, 43306, 43396, 43507, 43616, 43736, 43826, 43933, 44052, 44149, 44266, 44354, 44461, 44593, 44685, 44795, 44895, 45007, 45112, 45212, 45318, 45422, 45514, 45618, 45738, 45836, 45963, 46090, 46186, 46277, 46363, 46468, 46546, 46653, 46733, 46849, 46961, 47071, 47172, 47267, 47369, 47496, 47621, 47736, 47834, 47939, 48053, 48154, 48258, 48356, 48466, 48568, 48655, 48779, 48884, 48986, 49090, 49180, 49272, 49387, 49523, 49607, 49716, 49817, 49910, 50004, 50108, 50229, 50344, 50465, 50556, 50674, 50788, 50878, 50990, 51138, 51269, 51366, 51455, 51576, 51687, 51806, 51920, 52014, 52125, 52210, 52334, 52483, 52611, 52728, 52823, 52933, 53055, 53169, 53290, 53398, 53527, 53637, 53771, 53873, 53986, 54090, 54193, 54297, 54398, 54512, 54655, 54774, 54866, 54927, 55067, 55175, 55289, 55398, 55526, 55624, 55749, 55861, 55965, 56087, 56225, 56334, 56457, 56558, 56679, 56813, 56912, 57033, 57142, 57233, 57340, 57437, 57562, 57682, 57797, 57888, 57977, 58087, 58175, 58291, 58420, 58544, 58660, 58785, 58888, 58988, 59115, 59219, 59324, 59434, 59566, 59657, 59763, 59865, 59972, 60061, 60169, 60282, 60398, 60504, 60640, 60753, 60836, 60934, 61019, 61136, 61233, 61325, 61433, 61532, 61659, 61743, 61849, 61955, 62058, 62159, 62255, 62369, 62451, 62546, 62657, 62743, 62841, 62952, 63050, 63180, 63270, 63375, 63504, 63625, 63725, 63832, 63936, 64039, 64156, 64272, 64381, 64533, 64672, 64794, 64907, 65004, 65123, 65225, 65350, 65482, 65580, 65697, 65791, 65929, 66030, 66156, 66277, 66371, 66483, 66572, 66686, 66788, 66884, 66979, 67089, 67208, 67317, 67439, 67545, 67662, 67773, 67892, 67982, 68073, 68179, 68299, 68408, 68495, 68587, 68694, 68777, 68880, 68992, 69096, 69198, 69308, 69412, 69521, 69626, 69735, 69817, 69939, 70062, 70185, 70300, 70422, 70532, 70646, 70766, 70901, 71043, 71161, 71249, 71338, 71434, 71540, 71663, 71800, 71911, 72003, 72095, 72182, 72301, 72409, 72518, 72642, 72754, 72850, 72980, 73075, 73166, 73285, 73420, 73533, 73643, 73794, 73913, 74044, 74141, 74258, 74344, 74463, 74554, 74652, 74776, 74864, 74969, 75091, 75211, 75309, 75409, 75533, 75640, 75744, 75821, 75932, 76035, 76153, 76278, 76386, 76475, 76590, 76676, 76790, 76927, 77034, 77163, 77252, 77372, 77479, 77601, 77694, 77788, 77894, 78005, 78141, 78268, 78373, 78469, 78581, 78680, 78789, 78907, 79011, 79117, 79225, 79321, 79438, 79552, 79688, 79801, 79892, 79995, 80091, 80188, 80297, 80395, 80541, 80649, 80742, 80850, 80956, 81068, 81166, 81282, 81381, 81488, 81580, 81722, 81817, 81918, 82022, 82122, 82230, 82331, 82454, 82576, 82692, 82797, 82910, 83022, 83114, 83221, 83304, 83443, 83551, 83654, 83760, 83875, 83969, 84069, 84166, 84270, 84375, 84461, 84581, 84696, 84799, 84906, 85011, 85138, 85237, 85339, 85434, 85542, 85653, 85766, 85862, 85987, 86093, 86187, 86266, 86390, 86512, 86660, 86752, 86883, 87028, 87145, 87261, 87363, 87482, 87575, 87688, 87781, 87914, 88025, 88110, 88234, 88360, 88455, 88562, 88650, 88789, 88885, 88974, 89069, 89204, 89291, 89416, 89538, 89634, 89735, 89863, 89964, 90070, 90178, 90302, 90400, 90520, 90629, 90753, 90869, 90965, 91093, 91175, 91287, 91378, 91476, 91610, 91729, 91829, 91915, 92037, 92156, 92273, 92386, 92507, 92597, 92703, 92820, 92908, 93016, 93129, 93248, 93375, 93478, 93598, 93704, 93795, 93908, 94040, 94130, 94253, 94363, 94499, 94602, 94701, 94789, 94889, 95005, 95111, 95221, 95318, 95422, 95520, 95611, 95710, 95842, 95951, 96037, 96158, 96242, 96352, 96465, 96567, 96672, 96770, 96853, 96947, 97042, 97164, 97280, 97399, 97498, 97614, 97712, 97812, 97919, 98012, 98113, 98250, 98380, 98497, 98602, 98725, 98856, 98966, 99072, 99162, 99275, 99377, 99495, 99596, 99719, 99841, 99971, 100081, 100153, 100272, 100371, 100480, 100588, 100700, 100792, 100897, 100997, 101102, 101204, 101309, 101396, 101493, 101611, 101728, 101851, 101952, 102057, 102156, 102259, 102363, 102467, 102583, 102672, 102800, 102923, 103035, 103124, 103211, 103324, 103411, 103508, 103593, 103687, 103818, 103917, 104017, 104127, 104241, 104330, 104444, 104556, 104670, 104754, 104884, 104961, 105076, 105196, 105282, 105398, 105528, 105619, 105716, 105824, 105918, 106016, 106113, 106226, 106303, 106421, 106511, 106632, 106786, 106875, 106998, 107106, 107234, 107354, 107460, 107596, 107704, 107813, 107919, 108029, 108118, 108229, 108361, 108455, 108581, 108666]

  bs3 = [78, 132, 132, 138, 154, 158, 154, 154, 156, 170, 170, 170, 170, 170, 170, 170, 172, 172, 172, 172, 172, 172, 174, 172, 172, 172, 174, 174, 174, 174, 174, 174, 174, 174, 174, 192, 214, 214, 214, 214, 214, 214, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 274, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292]

  if multidelta:
    deltaplot(bs1, bs2, bs3, bs4, 80, 60, 50, 40, t)
  else:
    multiplot(bs1, bs2, bs3, 1, 25000, 20, METHOD, t)

  random_seq_list = tp_calc.random_sequences(amount, length, err_rate, "acgt")
 
  ciglist = []
  for i in range(0, len(random_seq_list), 2):
    print i/2 + 1, "von", len(random_seq_list)/2
    end_seq1 = len(random_seq_list[i])
    end_seq2 = len(random_seq_list[i + 1])
    aln = Alignment.Alignment(random_seq_list[i], random_seq_list[i + 1], 
                              start_seq1, end_seq1, start_seq2, end_seq2)

    if METHOD == "cigar":

      # CIGAR

      ciglist.append(aln.calc_cigar(aln.seq1, aln.seq2))

      if i == len(random_seq_list) - 2:
        
        print "LÄNGE:", len(ciglist)

        bs1 = cigar_kodierung(ciglist, "binary")
        bs2 = cigar_kodierung(ciglist, "unary")
        bs3 = cigar_kodierung(ciglist, "huffman")

        print "\nBS1:\n", bs1, "\n"
        print "\nBS2:\n", bs2, "\n"
        print "\nBS3:\n", bs3, "\n"

        multiplot(bs1, bs2, bs3, 800, 300, 100, METHOD, t)
  
    elif METHOD == "tracepoint":

      # Differenzen

      cigar = aln.calc_cigar(aln.seq1, aln.seq2)
      tp_aln = TracePoint.TracePointAlignment(aln.seq1, aln.seq2, start_seq1,
                                end_seq1, start_seq2, end_seq2, delta, cigar)

      if i == len(random_seq_list) - 2:
        #multiplot(bs1, bs2, bs3, 1, 2000, 25, METHOD, t)
        print "\nBS1:\n", bs1, "\n"
        print "\nBS2:\n", bs2, "\n"
        print "\nBS3:\n", bs3, "\n"
        multiplot(bs1, bs2, bs3, 1, 100, 25, METHOD, t)
      else:
        TP.append(delta)
        TP.append(tp_aln.tp[0])
        for j in range(1, len(tp_aln.tp)):
          TP.append(tp_aln.tp[j] - tp_aln.tp[j - 1])

        for a in tp_kodierung(TP, "binary"): bs1.append(a)
        #for b in tp_kodierung(TP, "unary"): 
        #  for c in b:
        #    bs2.append(c)
        bs2.append(tp_kodierung(TP, "unary")[0])
        for d in tp_kodierung(TP, "tracepoint"): bs3.append(d)

if __name__ == "__main__":
  main()
